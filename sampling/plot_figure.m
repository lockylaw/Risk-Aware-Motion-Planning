%% plot figure
function fig = plot_figure(model, plotoptions)
%     Input:  model          -- the simulation model of robot and obstacles
%             plotoptions    -- the options of figures
%     Output: fig            -- main figure

    fig.fig_main = figure;              % main figure
    hold on;
    axis([-5 3 -3 4]);
    ax_main = fig.fig_main.CurrentAxes;
    fig.ax_main = ax_main;
    box on;
    grid on;
    axis equal;
    xlabel('x (m)');
    ylabel('y (m)');
    set(ax_main, 'FontSize', 24);
    
    
    for i = 1:model.obs_num
        fig.fig_obs_pos = plot(ax_main, model.obs_pos(1,i), model.obs_pos(2,i), ...
                    'Color', 'g', ...
                    'Marker', '*', ... 
                    'LineWidth', 2.0, 'LineStyle', '-');
        if plotoptions.if_obsEllip == 1
            % plot obstacle position covariance
            [pos_cov_xData, pos_cov_yData] = getErrorEllipsePoint2D(model.obs_pos_cov(:, :, i), model.obs_pos(:,i), 1, 0);
            fig.fig_obs_pos_cov_1 = plot(ax_main, pos_cov_xData, pos_cov_yData, ...
                            'Color', 'k', ...
                            'LineWidth', 1.5, 'LineStyle', '--');
            [pos_cov_xData, pos_cov_yData] = getErrorEllipsePoint2D(model.obs_pos_cov(:, :, i), model.obs_pos(:,i), 2, 0);
            fig.fig_obs_pos_cov_2 = plot(ax_main, pos_cov_xData, pos_cov_yData, ...
                            'Color', 'b', ...
                            'LineWidth', 1.5, 'LineStyle', '--');
            [pos_cov_xData, pos_cov_yData] = getErrorEllipsePoint2D(model.obs_pos_cov(:, :, i), model.obs_pos(:,i), 3, 0);
            fig.fig_obs_pos_cov_3 = plot(ax_main, pos_cov_xData, pos_cov_yData, ...
                            'Color', 'm', ...
                            'LineWidth', 1.5, 'LineStyle', '--');
            print(fig.fig_main, 'scenario.pdf', '-dpdf', ...
                        '-r300', '-bestfit');
        end
        % plot obstacle shape
        fig.fig_ell_obs = plot_ellipse_2D(ax_main, model.obs_pos(:,i), model.obs_ell_size(:, i), 0, ...
                    'FaceColor', 'r', 'FaceAlpha', 0.4, ...
                    'EdgeColor', 'r', 'EdgeAlpha', 0.6);
    end
    
    


    % plot robot position mean
    fig.fig_robot_pos = plot(ax_main, model.robot_pos(1), model.robot_pos(2), ...
                    'Color', 'g', ...
                    'Marker', '*', ... 
                    'LineWidth', 2.0, 'LineStyle', '-');
                
    if plotoptions.if_robotEllip == 1
        % plot robot position covariance
        [pos_cov_xData, pos_cov_yData] = getErrorEllipsePoint2D(model.robot_pos_cov, model.robot_pos, 1, 0);
        fig.fig_robot_pos_cov_1 = plot(ax_main, pos_cov_xData, pos_cov_yData, ...
                        'Color', 'g', ...
                        'LineWidth', 1.5, 'LineStyle', '--');
        [pos_cov_xData, pos_cov_yData] = getErrorEllipsePoint2D(model.robot_pos_cov, model.robot_pos, 2, 0);
        fig.fig_robot_pos_cov_2 = plot(ax_main, pos_cov_xData, pos_cov_yData, ...
                        'Color', 'g', ...
                        'LineWidth', 1.5, 'LineStyle', '--');
        [pos_cov_xData, pos_cov_yData] = getErrorEllipsePoint2D(model.robot_pos_cov, model.robot_pos, 3, 0);
        fig.fig_robot_pos_cov_3 = plot(ax_main, pos_cov_xData, pos_cov_yData, ...
                        'Color', 'g', ...
                        'LineWidth', 1.5, 'LineStyle', '--');
        print(fig.fig_main, 'scenario.pdf', '-dpdf', ...
                    '-r300', '-bestfit');
    end
    % plot robot shape
    fig.fig_ell_robot = plot_ellipse_2D(ax_main, model.robot_pos, model.robot_ell_size, 0, ...
                'FaceColor', 'r', 'FaceAlpha', 0.4, ...
                'EdgeColor', 'r', 'EdgeAlpha', 0.6);

end